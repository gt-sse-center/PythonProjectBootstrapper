{
    "name": "<your name>",
    "email": "<your email>",

    "project_description": "<your project description>",

    "license": [
        "MIT",
        "Apache-2.0",
        "BSD-3-Clause-Clear",
        "GPL-3.0-or-later",
        "BSL-1.0"
    ],

    "github_url": "https://github.com",
    "github_username": "<your github username>",
    "github_project_name": "<your github repository>",
    "pypi_project_name": "{{ cookiecutter.github_project_name }}",

    "gist_id": "<your gist id>",
    "gist_username": "{{ cookiecutter.github_username }}",

    "sign_binaries": true,
    "openssf_best_practices_badge_id": "__openssf_badge_id__",
    "create_docker_image": false,

    "__empty_dir": "",

    "__prompts_warning__": "The values in the __prompts__ section were produced by running `../../PopulateCookiecutterPrompts.py` and will be overwritten the next time that script is run. To modify prompt values, make changes in `cookiecutter_prompts.yaml` and run that script.",

    "__prompts__": {
        "name": "\n\nPlease enter your name.\n\nThis value will be used in:\n    - The copyright header for source files\n    - Metadata for the generated python package\n    - Metadata for the generated python binary\n\n",
        "email": "\n\nPlease enter your email address.\n\nThis value will be used in:\n    - Metadata for the generated python package\n    - Metadata for the generated python binary\n\n",
        "project_description": "\n\nPlease enter a short description of your project (less than 100 characters).\n\nThis value will be used in:\n    - Metadata for the generated python package\n    - Metadata for the generated python binary\n\n",
        "license": "\n\nPlease enter the license you would like to use for your project. https://choosealicense.com/ is a good resource that helps you choose the best license for your project.\n\nThis value will be used in:\n    - Population of the License.txt file (or equivalent)\n    - The copyright header for source files\n    - Metadata for the generated python package\n    - Metadata for the generated python binary\n    - Metadata for the generated docker image (if applicable)\n\n",
        "github_url": "\n\nPlease enter the GitHub URL. You should use the URL to your GitHub repository as a guide when specifying this value.\n\n    https://github.com/username/projectname\n    ^^^^^^^^^^^^^^^^^^\n    This is the GitHub URL\n\n",
        "github_username": "\n\nPlease enter your GitHub username. You should use the URL to your GitHub repository as a guide when specifying this value.\n\n    https://github.com/username/projectname\n                       ^^^^^^^^\n                       This is the GitHub username\n\n",
        "github_project_name": "\n\nPlease enter your GitHub project name. You should use the URL to your GitHub repository as a guide when specifying this value.\n\n    https://github.com/username/projectname\n                                ^^^^^^^^^^^\n                                This is the GitHub project name\n\n",
        "pypi_project_name": "\n\nPlease enter the name of your project as it will appear on PyPI (https://pypi.org). This name cannot be associated with any other project on PyPI.\n\n",
        "gist_id": "\n\nPlease enter the GitHub gist id for use with this project.\n\nGitHub defines a gist as \"a simple way to share snippets and pastes with others.\" The generated python project will use a gist to store information dynamically generated during the build (for example code coverage information) that can be retrieved at a later time (for example, to display a code coverage badge in the project's README.md file). To create a gist:\n    1. Go to https://gist.github.com/\n    2. Enter the following values in their respective fields:\n\n        Gist description...:                Gist used by GitHub Action workflows to store and retrieve dynamic information (oftentimes used to create and display badges).\n        Filename including extension...:    README.md\n        File contents:                      Gist used by GitHub Action workflows to store and retrieve dynamic information (oftentimes used to create and display badges).\n\n    3. Click the \"Create secret gist\" button\n    4. Copy the gist id (this will be the hex string at the end of the url associated with the gist\n       that was just created). It will look something like:\n\n          https://gist.github.com/<github username>/4c10281ff1abc26cafcb9a5f9a8a443e\n                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                                                           This is the gist id\n\n",
        "gist_username": "\n\nPlease enter the username associated with your gist_id. In most cases, this will be the same as your GitHub username.\n\n",
        "sign_binaries": "\n\nWould you like the GitHub Action workflows to sign binaries produced by the project?\n\nA signed binary can be validated against its signature to ensure that changes have not been made to it after it was created. This is especially useful when distributing software to others and is highly recommended.\n\n",
        "openssf_best_practices_badge_id": "\n\nEnter the OpenSSF Best Practices Badge ID to display in your README.md file. Keep this default value if you do not have an OpenSSF Best Practices Badge ID but would like to create one (this is highly recommended). Enter the value 'none' if you do not want to display this badge in your README.md file.\n\nThe Open Source Security Foundation (OpenSSF) Best Practices badge is a way for Free/Libre and Open Source Software (FLOSS) projects to show that they follow best practices. Additional information is available at https://www.bestpractices.dev/.\n\nThis script will automatically generate scaffolding to achieve a 63% score. Completing your project's documentation and following development best practices will raise your score to 100%. Participation in the OpenSSF Best Practices Badge program is highly recommended.\n\n",
        "create_docker_image": "\n\nWould you like the GitHub Action workflows to create docker images of the development environment? These images can be used to produce exact results across different commits made to the repository over time (which is especially valuable when writing scientific software).\n\n"
    },

    "_extensions": [
        "local_extensions.pypi_string",
        "local_extensions.escape_double_quotes"
    ]
}
